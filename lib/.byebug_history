c
n
target.parent
target
n
exit
load 'binary_search_tree.rb'
target.parent
target
n
target == @root
@root
n
target
n
target
c
n
tree_node.value == value
tree_node.value = value
tree_node.value
tree_node
n
c
n
value
tree_node.value
tree_node
tree_node.value
tree_node
n
tree_node.value
value
n
c
n
tree_node.value == value
tree_node.value
n
tree_node == nil
tree_node.value
tree_node
c
n
value
tree_node.value
tree_node
n
c
n
node
n
node
n
node.left
node.value < value
node.value
n
value
node
bst
n
bst
cc
n
c
n
exit
pry
node
n
c
n
c
n
value
n
node
n
node.right
n
node.value < value
node.value
n
node
n
node.value < value
node.right
node.value
n
node
n
node.right
value
node.value < value
node.value
n
node
n
node.left
node
nod
node = root
node
n
c
n
node.value < value
node.value
n
self.children(node).length
node
n
node
n
node.left
node.value < value
node.value
n
self.children(node).length > 0
n
node
n
node
n
s
n
node.left
value
node.value
n
self.children(node).length > 0
n
node
n
node
@root
c
exit
nod
c
n
exit
node.right
node.rigth
value
node.value
node
n
self.children(node).length
self
node
n
exit
n
node
n
node.value < value
value
7
node.value
n
value
node
n
c
n
c
n
node.left
n
value
node.value
n
self.children(node).length
node
n
c
n
exit
bst.insert(3)
load 'binary_search_tree.rb'
node.root
node
node.children
node.children.length
node
n
exit
@node
n
c
n
exit
n
@root
exit
